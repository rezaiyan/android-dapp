package com.github.rezaiyan.kickoff.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.1.
 */
@SuppressWarnings("rawtypes")
public class Kickoff extends Contract {
    public static final String BINARY = "608060405234801561000f575f80fd5b50600160405180604001604052806040518060400160405280601581526020017f42756b61796f2053616b612028417273656e616c29000000000000000000000081525081526020015f815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f01908161009591906107e6565b50602082015181600101555050600160405180604001604052806040518060400160405280601981526020017f4d6f68616d65642053616c616820284c69766572706f6f6c290000000000000081525081526020015f815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f01908161012791906107e6565b50602082015181600101555050600160405180604001604052806040518060600160405280602181526020016110e56021913981526020015f815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f01908161019c91906107e6565b50602082015181600101555050600160405180604001604052806040518060400160405280601a81526020017f4c696f6e656c204d657373692028496e746572204d69616d692900000000000081525081526020015f815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f01908161022e91906107e6565b50602082015181600101555050600160405180604001604052806040518060400160405280601081526020017f526f64726920284d616e2043697479290000000000000000000000000000000081525081526020015f815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f0190816102c091906107e6565b50602082015181600101555050600160405180604001604052806040518060400160405280601d81526020017f4a7564652042656c6c696e6768616d20285265616c204d61647269642900000081525081526020015f815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f01908161035291906107e6565b50602082015181600101555050600160405180604001604052806040518060400160405280601981526020017f56696e6963697573204a7220285265616c204d6164726964290000000000000081525081526020015f815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f0190816103e491906107e6565b50602082015181600101555050600160405180604001604052806040518060400160405280601981526020017f45726c696e67204861616c616e6420284d616e2043697479290000000000000081525081526020015f815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f01908161047691906107e6565b50602082015181600101555050600160405180604001604052806040518060400160405280601a81526020017f4861727279204b616e65202842617965726e204d756e6963682900000000000081525081526020015f815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f01908161050891906107e6565b50602082015181600101555050600160405180604001604052806040518060400160405280601b81526020017f4b796c69616e204d626170706520285265616c204d616472696429000000000081525081526020015f815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f01908161059a91906107e6565b506020820151816001015550506108b5565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061062757607f821691505b60208210810361063a576106396105e3565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261069c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610661565b6106a68683610661565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6106ea6106e56106e0846106be565b6106c7565b6106be565b9050919050565b5f819050919050565b610703836106d0565b61071761070f826106f1565b84845461066d565b825550505050565b5f90565b61072b61071f565b6107368184846106fa565b505050565b5b818110156107595761074e5f82610723565b60018101905061073c565b5050565b601f82111561079e5761076f81610640565b61077884610652565b81016020851015610787578190505b61079b61079385610652565b83018261073b565b50505b505050565b5f82821c905092915050565b5f6107be5f19846008026107a3565b1980831691505092915050565b5f6107d683836107af565b9150826002028217905092915050565b6107ef826105ac565b67ffffffffffffffff811115610808576108076105b6565b5b6108128254610610565b61081d82828561075d565b5f60209050601f83116001811461084e575f841561083c578287015190505b61084685826107cb565b8655506108ad565b601f19841661085c86610640565b5f5b828110156108835784890151825560018201915060208501945060208101905061085e565b868310156108a0578489015161089c601f8916826107af565b8355505b6001600288020188555050505b505050505050565b610823806108c25f395ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c80630121b93f1461004357806306a49fce1461005f5780633477ee2e1461007d575b5f80fd5b61005d600480360381019061005891906103ef565b6100ae565b005b61006761020e565b604051610074919061058e565b60405180910390f35b610097600480360381019061009291906103ef565b610303565b6040516100a5929190610605565b60405180910390f35b5f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615610137576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012e9061067d565b60405180910390fd5b600180549050811061017e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610175906106e5565b60405180910390fd5b60015f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555060018082815481106101e7576101e6610703565b5b905f5260205f2090600202016001015f828254610204919061075d565b9250508190555050565b60606001805480602002602001604051908101604052809291908181526020015f905b828210156102fa578382905f5260205f2090600202016040518060400160405290815f82018054610261906107bd565b80601f016020809104026020016040519081016040528092919081815260200182805461028d906107bd565b80156102d85780601f106102af576101008083540402835291602001916102d8565b820191905f5260205f20905b8154815290600101906020018083116102bb57829003601f168201915b5050505050815260200160018201548152505081526020019060010190610231565b50505050905090565b60018181548110610312575f80fd5b905f5260205f2090600202015f91509050805f018054610331906107bd565b80601f016020809104026020016040519081016040528092919081815260200182805461035d906107bd565b80156103a85780601f1061037f576101008083540402835291602001916103a8565b820191905f5260205f20905b81548152906001019060200180831161038b57829003601f168201915b5050505050908060010154905082565b5f80fd5b5f819050919050565b6103ce816103bc565b81146103d8575f80fd5b50565b5f813590506103e9816103c5565b92915050565b5f60208284031215610404576104036103b8565b5b5f610411848285016103db565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61048582610443565b61048f818561044d565b935061049f81856020860161045d565b6104a88161046b565b840191505092915050565b6104bc816103bc565b82525050565b5f604083015f8301518482035f8601526104dc828261047b565b91505060208301516104f160208601826104b3565b508091505092915050565b5f61050783836104c2565b905092915050565b5f602082019050919050565b5f6105258261041a565b61052f8185610424565b93508360208202850161054185610434565b805f5b8581101561057c578484038952815161055d85826104fc565b94506105688361050f565b925060208a01995050600181019050610544565b50829750879550505050505092915050565b5f6020820190508181035f8301526105a6818461051b565b905092915050565b5f82825260208201905092915050565b5f6105c882610443565b6105d281856105ae565b93506105e281856020860161045d565b6105eb8161046b565b840191505092915050565b6105ff816103bc565b82525050565b5f6040820190508181035f83015261061d81856105be565b905061062c60208301846105f6565b9392505050565b7f596f75206861766520766f74656420616c7265616479210000000000000000005f82015250565b5f6106676017836105ae565b915061067282610633565b602082019050919050565b5f6020820190508181035f8301526106948161065b565b9050919050565b7f5468652063616e646964617465206973206e6f742076616c69642100000000005f82015250565b5f6106cf601b836105ae565b91506106da8261069b565b602082019050919050565b5f6020820190508181035f8301526106fc816106c3565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610767826103bc565b9150610772836103bc565b925082820190508082111561078a57610789610730565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806107d457607f821691505b6020821081036107e7576107e6610790565b5b5091905056fea2646970667358221220861450f454425ee736593d5681622efe74501515251f40c047854a17aa2f5f3a64736f6c634300081a00334b6576696e20446520427275796e6520284d616e63686573746572204369747929";

    private static String librariesLinkedBinary;

    public static final String FUNC_VOTE = "vote";

    public static final String FUNC_CANDIDATES = "candidates";

    public static final String FUNC_GETCANDIDATES = "getCandidates";

    @Deprecated
    protected Kickoff(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Kickoff(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Kickoff(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Kickoff(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> vote(BigInteger candidateIndex) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(candidateIndex)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> candidates(BigInteger param0) {
        final Function function = new Function(FUNC_CANDIDATES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getCandidates() {
        final Function function = new Function(FUNC_GETCANDIDATES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Candidate>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    @Deprecated
    public static Kickoff load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new Kickoff(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Kickoff load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kickoff(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Kickoff load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new Kickoff(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Kickoff load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Kickoff(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Kickoff> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Kickoff.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    public static RemoteCall<Kickoff> deploy(Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Kickoff.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<Kickoff> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Kickoff.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<Kickoff> deploy(Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Kickoff.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class Candidate extends DynamicStruct {
        public String name;

        public BigInteger votes;

        public Candidate(String name, BigInteger votes) {
            super(new org.web3j.abi.datatypes.Utf8String(name), 
                    new org.web3j.abi.datatypes.generated.Uint256(votes));
            this.name = name;
            this.votes = votes;
        }

        public Candidate(Utf8String name, Uint256 votes) {
            super(name, votes);
            this.name = name.getValue();
            this.votes = votes.getValue();
        }
    }
}
